/*
 * Open Source Software published under the Apache Licence, Version 2.0.
 */

import org.gradle.internal.os.OperatingSystem;

ext {
    publishedVersion = project.version
    mainClass = 'io.github.vocabhunter.gui.distribution.PackagedVocabHunter'
    operatingSystem = OperatingSystem.current()
    if (operatingSystem.isMacOsX()) {
        packageType = 'dmg'
        mainClass = 'io.github.vocabhunter.osx.distribution.OsxPackagedVocabHunter'
        appIcon = file('icons/mac/VocabHunter.icns')
        sessionIcon = file('icons/mac/VocabHunterSession.icns')
        if (publishedVersion.endsWith('-SNAPSHOT')) {
            publishedVersion = '1.0.0'
        }
    } else if (operatingSystem.isLinux()) {
        packageType = 'deb'
        appIcon = file('icons/App1024.png')
        sessionIcon = file('icons/Doc1024.png')
    } else if (operatingSystem.isWindows()) {
        packageType = 'exe'
        appIcon = file('icons/windows/VocabHunter.ico')
        sessionIcon = file('icons/windows/VocabHunterSession.ico')
    }
}

ant.version = publishedVersion
ant.mainClass = mainClass
ant.packageType = packageType
ant.appIcon = appIcon
ant.sessionIcon = sessionIcon
ant.importBuild 'bundle-ant.xml'

dependencies {
    compile project(':gui')
    if (OperatingSystem.current().isMacOsX()) {
        compile project(':osx')
    }
}

if (operatingSystem.isMacOsX()) {
    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                srcDir 'src/osx/java'
            }
        }
    }
}

def alljars = configurations.runtime

jar {
    manifest {
        attributes 'Main-Class': mainClass
        attributes 'Class-Path': alljars.collect { it.getName() }.join(' ')
    }
}

task recreateIconMacApp(type: Exec) {
    description 'Regenerate the Mac application icon'
    commandLine 'sh', file('bin/mac-icon.sh'), file('icons/App1024.png'), file('icons/mac'), 'VocabHunter'
}

task recreateIconMacSession(type: Exec) {
    description 'Regenerate the Mac session file icon'
    commandLine 'sh', file('bin/mac-icon.sh'), file('icons/Doc1024.png'), file('icons/mac'), 'VocabHunterSession'
}

task recreateIconWindowsApp(type: Exec) {
    description 'Regenerate the Windows application icon'
    commandLine 'sh', file('bin/windows-icon.sh'), file('icons/App1024.png'), file('icons/windows'), 'VocabHunter'
}

task recreateIconWindowsSession(type: Exec) {
    description 'Regenerate the Windows session file icon'
    commandLine 'sh', file('bin/windows-icon.sh'), file('icons/Doc1024.png'), file('icons/windows'), 'VocabHunterSession'
}

task recreateIcons(dependsOn: [recreateIconMacApp, recreateIconMacSession, recreateIconWindowsApp, recreateIconWindowsSession]) {
    description 'Regenerate all the application bundle icons'
}

task copyJars(type: Copy) {
    description 'Copy all of the JARs for the bundled version of the application'
    into "$buildDir/libs"
    from alljars
}

jfxbundle.doLast {
    String bundle = "VocabHunter-${publishedVersion}.${packageType}"
    FileTree tree = fileTree('build/bundles') {
        include {
            it.file.name.equalsIgnoreCase(bundle)
        }
    }
    if (tree.isEmpty()) {
        throw new GradleException("Unable to create bundle file '$bundle'")
    } else {
        tree.each {File f ->
            println "Created bundle '$f'"
        }
    }
}

jfxbundle.dependsOn jar, copyJars
